# 配置中心
spring.application.name=banyuanmall-coupon
spring.cloud.nacos.config.server-addr=192.168.11.149:8848

# 指定使用配置中心的那个命名空间里面的数据  比如说  使用 prod 生产环境  默认使用的命名空间是public
#spring.cloud.nacos.config.namespace=cdace3dc-9840-4d1b-aae2-bc3782c61a76

# 可以指定每一个微服务在启动的时候只读取自己命名空间下的配置 比如说只读  coupon 命名空间下的配置 基于微服务进行隔离
spring.cloud.nacos.config.namespace=ec6a2d21-387a-4a61-b068-e2f48dc36d13

# 配置双11组名
#spring.cloud.nacos.config.group=1111

# 配置双dev(开发)组名
spring.cloud.nacos.config.group=dev

# 配置双prod(线上)组名
#spring.cloud.nacos.config.group=prod

#使用微服务同时加载多个文件
spring.cloud.nacos.config.extension-configs[0].data-id=datasource.yml
spring.cloud.nacos.config.extension-configs[0].group=dev
# 修改配置中心里面的数据  会不会动态刷新   默认是false
spring.cloud.nacos.config.extension-configs[0].refresh=true

#使用微服务同时加载多个文件
spring.cloud.nacos.config.extension-configs[1].data-id=mybatis.yml
spring.cloud.nacos.config.extension-configs[1].group=dev
# 修改配置中心里面的数据  会不会动态刷新   默认是false
spring.cloud.nacos.config.extension-configs[1].refresh=true


#使用微服务同时加载多个文件
spring.cloud.nacos.config.extension-configs[2].data-id=other.yml
spring.cloud.nacos.config.extension-configs[2].group=dev
# 修改配置中心里面的数据  会不会动态刷新   默认是false
spring.cloud.nacos.config.extension-configs[2].refresh=true

# 配置中心没有的会默认加载配置文件中(properties 默认组)的数据  我们可以指定一下配置中心的中的dev组